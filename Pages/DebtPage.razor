@page "/debtpage"
@using SplitWise.Data
@using SplitWiseDB.Data.SplitWise
@inject NavigationManager NavigationManager
@inject Data.BillService BillService
@inject Data.BillSplitService BillSplitService
@inject Data.GroupService GroupService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<BillSplitService>


<AuthorizeView>
    <Authorized>
        <h1>Мои долги</h1>
        <br />
        @if (billSplits == null)
        {
            <p><em>Загружаем данные...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th> Дата </th>
                        <th> Создатель </th>
                        <th> Сумма </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var billSplit in billSplits)
                    {
                        <tr>
                            <td>@billSplit.Date.Value.ToShortDateString()</td>
                            <td>@billSplit.UserName</td>                      
                            <td>@billSplit.Amount</td>                       
                            <td>
                                <button class="btn btn-primary"
                                        @onclick="(() => OpenBill(billSplit.BillId))">
                                    Подробнее
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>Войдите в приложение.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<BillSplit> billSplits;
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        billSplits = await @Service.GetDebtAsync(user.Identity.Name);
    }

    BillSplit objBillSplit = new BillSplit();
    Bill objBill = new Bill();

    bool ShowPopup = false;

    void ClosePopup()
    {
        ShowPopup = false;
    }

    void AddNewBillSplit()
    {
        objBillSplit = new BillSplit();
        objBillSplit.Id = 0;
        ShowPopup = true;
    }

    async Task SaveBillSplit()
    {
        ShowPopup = false;
        var user = (await authenticationStateTask).User;
        if (objBillSplit.Id == 0)
        {
            BillSplit objNewBillSplit = new BillSplit();

            objNewBillSplit.Id = objNewBillSplit.Id;

            objNewBillSplit.Date = System.DateTime.Now;

            objNewBillSplit.RecipientName = user.Identity.Name;

            objNewBillSplit.Amount = objBillSplit.Amount;

            var result =
            @Service.CreateBillSplitAsync(objNewBillSplit);
        }
        else
        {
            var result =
            @Service.UpdateBillSplitAsync(objBillSplit);
        }

        billSplits =
        await @Service.GetBillSplitAsync(Convert.ToInt32(objBillSplit.BillId));
    }



    void OpenBillSplit(BillSplit billSplitsTable, int i, string curr, string descripiton)
    {
        BillService.IdNumber = i;
        objBillSplit = billSplitsTable;
        objBill.Currency = curr;
        NavigationManager.NavigateTo("billsplitpage");
    }

    void OpenBill(int id)
    {
        BillService.IdNumber = id;
        NavigationManager.NavigateTo("billsplitpage");

    }

}